# Settings in this file are only for interactive shells.
# I don't know why bash loads this file for scp etc.,
# Return if that's the case.
[ "$PS1" ] || return

# Load user bash-completion files manually,
# for some reason on-demand loading doesn't work (at least for pass-xxxx files)
for bcfile in "${HOME}"/.local/share/bash-completion/completions/* ; do
  [ -f "${bcfile}" ] && . "${bcfile}"
done

# User specific environment
if ! [[ $PATH =~ $HOME/.home/bin ]]
then
    PATH="$HOME/.home/bin:$PATH"
fi
export PATH

# Base aliases
alias ls="ls --color=auto --human-readable"                                     # More readable output
alias la="ls -la --color=auto --human-readable"
alias grep="grep --color=auto"
alias free="free -ht"
alias space="du -S | sort -n -r | more"
alias rm="rm -vi"
alias du="du -kh"                                                               # Makes a more readable output
alias df="df -Tha --total"
alias mkdir="mkdir -pv"
alias reload="source \${HOME}/.bashrc"
alias update="make update -s -C \${HOME}/.home/.dotfiles.d"
alias backup="make backup -s -C \${HOME}/.home/.dotfiles.d"
alias clean="make clean -s -C \${HOME}/.home/.dotfiles.d"
alias mnt="mount | column -t"
alias cat="bat --paging=never"
alias edit="/usr/bin/editor"
alias dotfiles="cd \${HOME}/.home/.dotfiles.d"

# Make multiple shells share the same history file
export HISTSIZE=1000000                                                         # Bash history will save N commands
export HISTFILESIZE=${HISTSIZE}                                                 # Bash will remember N commands
export HISTCONTROL=ignoreboth:erasedups                                         # Ignore duplicates and spaces
export HISTIGNORE='&:ls:ll:la:cd:exit:clear:history'
export HISTTIMEFORMAT='%F %T '
export PROMPT_COMMAND="history -n; history -w; history -c; history -r; $PROMPT_COMMAND"

# Append to the history file, don't overwrite it
shopt -s histappend

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# man settings
export GROFF_NO_SGR=1
export MANPAGER="less -s -M +Gg"

# Source: http://unix.stackexchange.com/a/147

# default editor (use `editor` alternative)
export VISUAL=/usr/bin/editor
export EDITOR=/usr/bin/editor

# fzf settings
export FZF_DEFAULT_OPTS="--multi --height 40% --layout=reverse --border --inline-info --preview 'bat --style=numbers --color=always --line-range :500 {}'"
export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git --exclude .Private'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND="fd -t d . $HOME"

# ydiff settings
export YDIFF_OPTIONS='-s -w0 --pager=bat'

# GPG settings
GPG_TTY=$(tty)
export GPG_TTY

function man {
	env \
		LESS_TERMCAP_mb=$(tput bold; tput setaf 2) \
		LESS_TERMCAP_md=$(tput bold; tput setaf 6) \
		LESS_TERMCAP_me=$(tput sgr0) \
		LESS_TERMCAP_so=$(tput bold; tput setaf 3; tput setab 4) \
		LESS_TERMCAP_se=$(tput rmso; tput sgr0) \
		LESS_TERMCAP_us=$(tput smul; tput bold; tput setaf 7) \
		LESS_TERMCAP_ue=$(tput rmul; tput sgr0) \
		LESS_TERMCAP_mr=$(tput rev) \
		LESS_TERMCAP_mh=$(tput dim) \
		LESS_TERMCAP_ZN=$(tput ssubm) \
		LESS_TERMCAP_ZV=$(tput rsubm) \
		LESS_TERMCAP_ZO=$(tput ssupm) \
		LESS_TERMCAP_ZW=$(tput rsupm) \
		PAGER="${commands[less]:-$PAGER}" \
		man "$@"
}

function fcount {
	find . -maxdepth 1 -type d | sort | while read -r dir; do n=$(find "$dir" -type f | wc -l); printf "%4d : %s\n" $n "$dir"; done
}

# Source: https://github.com/xvoland/Extract/blob/master/extract.sh

function extract {
	if [ -z "$1" ]; then
		# display usage if no parameters given
		echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
		echo "       extract <path/file_name_1.ext> [path/file_name_2.ext] [path/file_name_3.ext]"
	else
		for n in "$@" ; do
			if [ -f "$n" ] ; then
				case "${n%,}" in
					*.cbt|*.tar.bz2|*.tar.gz|*.tar.xz|*.tbz2|*.tgz|*.txz|*.tar) tar xvf "$n"       ;;
					*.lzma)      unlzma ./"$n"      ;;
					*.bz2)       bunzip2 ./"$n"     ;;
					*.cbr|*.rar) unrar x -ad ./"$n" ;;
					*.gz)        gunzip ./"$n"      ;;
					*.cbz|*.epub|*.zip) unzip ./"$n"       ;;
					*.z)         uncompress ./"$n"  ;;
					*.7z|*.apk|*.arj|*.cab|*.cb7|*.chm|*.deb|*.dmg|*.iso|*.lzh|*.msi|*.pkg|*.rpm|*.udf|*.wim|*.xar) 7z x ./"$n"        ;;
					*.xz)        unxz ./"$n"        ;;
					*.exe)       cabextract ./"$n"  ;;
					*.cpio)      cpio -id < ./"$n"  ;;
					*.cba|*.ace) unace x ./"$n"     ;;
					*.zpaq)      zpaq x ./"$n"      ;;
					*.arc)       arc e ./"$n"       ;;
					*.cso)       ciso 0 ./"$n" ./"$n.iso" && \
									  extract $n.iso && \rm -f $n ;;
					*)
								 echo "extract: '$n' - unknown archive method"
								 return 1
								 ;;
				esac
			else
				echo "'$n' - file does not exist"
				return 1
			fi
		done
	fi
}

function ff {
	grep -r "$1" .;
}

exists() { [[ ${1:0:1} == "/" ]] && { test -f $1 || test -d $1; } || command -v $1 >/dev/null 2>&1; }

function img64 {

	usage() {
		echo "Usage: img64 [FILE]"
		echo -e "Formats: APNG BMP GIF JPEG PNG WEBP\n"
	}

	# Print usage and exit if the file was not provided
	[ $# -eq 0 ] && echo -e "\nError: file is not specified\n" && usage && return 1

	# Check if file exists and is a regular file
	[ ! -f "$1" ] && echo -e "\nError: file not found\n" && usage && return 1

	# Grab the image format
	local fmt
	fmt=$(file "$1" | grep -iEo 'apng|bmp|gif|jpeg|png|webp' | head -n1 | tr '[:upper:]' '[:lower:]')

	# Check if the image format is supported
	[ -z "$fmt" ] && echo -e "\nError: unsupported file format\n" && usage && return 1

	# Generate template
	echo "data:image/${fmt};base64,$(base64 -w 0 "$1")"
}

function qr {
	qrencode -m 2 -t utf8 <<< "$1"
}

function sshkeys {
	for key in "${HOME}"/.ssh/id_*; do echo -n "${key%.pub}: "; ssh-keygen -l -f "${key}"; done | sort | uniq
}

function search {

	usage() {
		echo -e "Usage: search [package]\n"
	}

	[ $# -eq 0 ] && echo -e "\nError: package is not specified\n" && usage && return 1

	local package="$1"
	echo "dnf: " && dnf -q search "$package"
	command -v flatpak > /dev/null 2>&1 && echo -e "\nflatpak: " && flatpak search "$package" | grep -i "$package"
	command -v snap > /dev/null 2>&1 && echo -e "\nsnap: " && snap search "$package" | grep -i "$package"
}
