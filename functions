#!/usr/bin/env bash

#
# Variables
#

home_dir=${HOME}
config_dir=${HOME}/.home
distro=$(grep '^ID' /etc/os-release | cut -d'=' -f2 | tr '[:upper:]' '[:lower:]')
release=$(grep '^VERSION_ID' /etc/os-release | cut -d'=' -f2)
marker="~GENERATED BY DOTFILES SETUP~"

#
# Functions
#

#
# Simple ask function
# Source http://djm.me/ask
#

ask() {
    local prompt default REPLY

    while true; do

        if [ "${2:-}" = "Y" ]; then
            prompt="Y/n"
            default=Y
        elif [ "${2:-}" = "N" ]; then
            prompt="y/N"
            default=N
        else
            prompt="y/n"
            default=
        fi

        # Ask the question (not using "read -p" as it uses stderr not stdout)
        echo -n "[version: ${distro}@${release}] --> $1 [$prompt] "

        # Read the answer (use /dev/tty in case stdin is redirected from somewhere else)
        read REPLY </dev/tty

        # Default?
        if [ -z "$REPLY" ]; then
            REPLY=$default
        fi

        # Check if the reply is valid
        case "$REPLY" in
            Y*|y*) return 0 ;;
            N*|n*) return 1 ;;
        esac

    done
}

#
# * Checks if ".profile" file exists, creates it if doesn't
# * Checks that special command string to include custom ".profile-*" files
#
checkProfile() {
    if [ ! -f ${home_dir}/.profile ]; then
        touch ${home_dir}/.profile
    fi

    if [ -d ${config_dir}/.profile.d ]; then

        if ! grep -q "${marker}" "${home_dir}/.profile" ; then
		cat <<-EOF >> ${home_dir}/.profile
		
		# DO NOT REMOVE THIS LINE. ${marker}
		if [ -d ${config_dir}/.profile.d ]; then
		    for file in ${config_dir}/.profile.d/.profile-* ; do
		        . \$file
		    done
		    unset file
		fi
		EOF
	fi

    fi
}

#
# * Checks if ".bash_profile" file exists, creates it if doesn't
# * Checks that special command string to include custom ".bash_profile-*" files
#
checkBashProfile() {
    if [ ! -f ${home_dir}/.bash_profile ]; then
        touch ${home_dir}/.bash_profile
    fi

    if [ -d ${config_dir}/.bash_profile.d ]; then

        if ! grep -q "${marker}" "${home_dir}/.bash_profile" ; then
		cat <<-EOF >> ${home_dir}/.bash_profile
		
		# DO NOT REMOVE THIS LINE. ${marker}
		if [ -d ${config_dir}/.bash_profile.d ]; then
		    for file in ${config_dir}/.bash_profile.d/.bash_profile-* ; do
		        . \$file
		    done
		    unset file
		fi
		EOF
	fi

    fi
}

#
# * Checks if ".bashrc" file exists, creates it if doesn't
# * Checks that special command string to include custom ".bashrc-*" files
#
checkBashrc() {
    if [ ! -f ${home_dir}/.bashrc ]; then
        touch ${home_dir}/.bashrc
    fi

    if [ -d ${config_dir}/.bashrc.d ]; then

        if ! grep -q "${marker}" "${home_dir}/.bashrc" ; then
		cat <<-EOF >> ${home_dir}/.bashrc
		
		# DO NOT REMOVE THIS LINE. ${marker}
		if [ -d ${config_dir}/.bashrc.d ]; then
		    for file in ${config_dir}/.bashrc.d/.bashrc-* ; do
		        . \$file
		    done
		    unset file
		fi
		EOF
	fi

    fi
}


#
# * Checks if ".Xresources" file exists, creates it if doesn't
# * Checks that special command string to include custom ".Xresources-*" files
#
checkXresources() {
    if [ ! -f ${home_dir}/.Xresources ]; then
        touch ${home_dir}/.Xresources
    fi

    if [ -d ${config_dir}/.Xresources.d ]; then

        if ! grep -q "${marker}" "${home_dir}/.Xresources" ; then
		# Adding marker
		cat <<-EOF >> ${home_dir}/.Xresources
		
		! DO NOT REMOVE THIS LINE. ${marker}
		EOF
	fi

	# Check that all custom files are included
	for file in ${config_dir}/.Xresources.d/.Xresources* ; do
	    if ! grep -q "${file}" "${home_dir}/.Xresources" ; then
		echo "#include \"${file}\"" >> ${home_dir}/.Xresources
	    fi
	done

	# Reloading X resources
	xrdb ${home_dir}/.Xresources

    fi
}

# 
# Checks all resources
#
checkAllResources() {
    checkProfile
    checkBashProfile
    checkBashrc
    checkXresources
}